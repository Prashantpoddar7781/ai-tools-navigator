// frontend/src/pages/MainToolPage.jsx

import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import axios from "axios";

const categories = [
  {
    name: "Coding",
    tools: [
      { name: "GitHub Copilot", bestFor: "Frontend/Backend code suggestions", pros: ["Fast autocomplete", "VSCode support"], cons: ["Sometimes inaccurate", "Needs context"] },
      { name: "Replit Ghostwriter", bestFor: "Collaborative coding", pros: ["Easy integration", "Real-time help"], cons: ["Limited features in free plan"] },
      { name: "Codeium", bestFor: "Code completion for multiple languages", pros: ["Free", "Supports IDEs"], cons: ["Not as accurate as Copilot"] },
      { name: "Tabnine", bestFor: "AI-powered autocomplete", pros: ["Lightweight", "Private models"], cons: ["Basic model"] },
      { name: "Mutable AI", bestFor: "Auto-refactor and doc generation", pros: ["Speed", "Clarity"], cons: ["Not great for new code"] }
    ]
  },
  {
    name: "Graphic Design",
    tools: [
      { name: "Canva Magic Design", bestFor: "Quick design templates", pros: ["Easy UI", "Free options"], cons: ["Generic output"] },
      { name: "Adobe Firefly", bestFor: "Creative image generation", pros: ["High quality", "Brand support"], cons: ["Still in beta"] },
      { name: "Looka", bestFor: "Logo generation", pros: ["Fast", "Multiple ideas"], cons: ["Paid export"] },
      { name: "Designs.ai", bestFor: "Marketing collaterals", pros: ["Multilingual", "Voice-over AI"], cons: ["Limited customization"] },
      { name: "Fotor AI", bestFor: "Editing & enhancement", pros: ["Retouching", "Cartoonization"], cons: ["Free version watermark"] }
    ]
  },
  {
    name: "Video & Audio",
    tools: [
      { name: "Descript", bestFor: "Video editing from transcript", pros: ["Easy cut", "Voice clone"], cons: ["Laggy UI"] },
      { name: "Pictory", bestFor: "Convert blogs to video", pros: ["Fast export", "Stock assets"], cons: ["Generic voiceovers"] },
      { name: "Cleanvoice", bestFor: "Podcast editing", pros: ["Filler remover", "Language agnostic"], cons: ["Paid only"] },
      { name: "Krisp AI", bestFor: "Noise cancellation", pros: ["Live meetings"], cons: ["Subscription"] },
      { name: "Runway", bestFor: "AI-generated VFX", pros: ["Advanced video tools"], cons: ["Resource heavy"] }
    ]
  }
];

const userId = "user123"; // For demo; replace with actual auth ID later

export default function MainToolPage() {
  const [search, setSearch] = useState("");
  const [savedTools, setSavedTools] = useState([]);

  useEffect(() => {
    axios.get(`/api/stack/${userId}`)
      .then(res => {
        if (Array.isArray(res.data)) {
          setSavedTools(res.data);
        } else {
          console.error("Unexpected response format:", res);
          setSavedTools([]);
        }
      })
      .catch(err => {
        console.error("Fetch stack error:", err);
        setSavedTools([]);
      });
  }, []);

  const handleSaveTool = (tool) => {
    axios.post("/api/save-tool", { userId, tool })
      .then(() => setSavedTools(prev => [...prev, tool]))
      .catch(err => console.error("Save error:", err));
  };

  const filteredCategories = categories.map(cat => ({
    ...cat,
    tools: cat.tools.filter(tool =>
      tool.name.toLowerCase().includes(search.toLowerCase()) ||
      tool.bestFor.toLowerCase().includes(search.toLowerCase())
    )
  })).filter(cat => cat.tools.length > 0);

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Discover the Right AI Tool for Your Task</h1>
      <Input
        placeholder="Search tools by name, task, or category..."
        className="mb-6"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />

      {filteredCategories.map(cat => (
        <div key={cat.name} className="mb-10">
          <h2 className="text-2xl font-semibold mb-2">{cat.name}</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {cat.tools.map(tool => (
              <Card key={tool.name}>
                <CardContent className="p-4">
                  <h3 className="text-xl font-medium">{tool.name}</h3>
                  <p className="text-sm mb-2">Best for: <strong>{tool.bestFor}</strong></p>
                  <p className="text-sm mb-1">‚úÖ Pros:</p>
                  <ul className="list-disc list-inside text-sm">
                    {tool.pros.map((pro, i) => <li key={i}>{pro}</li>)}
                  </ul>
                  <p className="text-sm mt-2 mb-1">‚ö†Ô∏è Cons:</p>
                  <ul className="list-disc list-inside text-sm text-red-500">
                    {tool.cons.map((con, i) => <li key={i}>{con}</li>)}
                  </ul>
                  <Button className="mt-4 w-full" onClick={() => handleSaveTool(tool)}>
                    Save to My Stack
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      ))}

      <div className="mt-12">
        <h2 className="text-2xl font-semibold mb-4">üìå My Stack</h2>
        {savedTools.length === 0 ? (
          <p className="text-gray-500">No tools saved yet. Click "Save to My Stack" to start building your toolkit.</p>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {savedTools.map((tool, idx) => (
              <Card key={idx}>
                <CardContent className="p-4">
                  <h3 className="text-xl font-medium">{tool.name}</h3>
                  <p className="text-sm mb-2">Best for: <strong>{tool.bestFor}</strong></p>
                  <ul className="list-disc list-inside text-sm">
                    {tool.pros.map((pro, i) => <li key={i}>{pro}</li>)}
                  </ul>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
